/*{
    "author": "Josh Hughes",
    "targets": ["omnifocus"],
    "type": "action",
    "version": "1.1",
    "description": "Toggle a given tag",
    "label" : "Toggle Tag",
    "image": "tag"
}*/
(() => {

    // INSTRUCTIONS:
    // Replace 'NAME OF TAG' with the tag you would like to toggle.
    // If, when this plugin adds the given tag, you would like it to remove all
    // sibling tags as well, set removeSiblingTags to true (no quotes)

    const options = {
        'tagName'           : 'NAME OF TAG',
        'removeSiblingTags' : false
    }
        
    const tagableItems = (objects) => {
        return objects.filter(item => (item instanceof Task || item instanceof Project));
    }

    const allSelectedItemsHaveTag = (selection, selectedTag) => {
        return selection.every(item => (item.tags && item.tags.includes(selectedTag)));
    }

    const findTagAndSiblings = (options, tagGroup = tags) => {
        if (options && options.tagName) {
            if (tagGroup.length > 0) {
                for (testedTag of tagGroup) {
                    if (testedTag.name === options.tagName) {
                        return {
                            'selectedTag' : testedTag,
                            'siblingTags' : tagGroup.filter(tag => tag !== testedTag)
                        };
                    } else {
                        let childTest = findTagAndSiblings(options, testedTag.tags);
                        if (childTest) {
                            return childTest;
                        }
                    }
                };
            }
        }
        return false;
    }

    const toggleTag = (selection, options) => {
        const items          = tagableItems(selection.allObjects),
              tagAndSiblings = findTagAndSiblings(options);
        
        if (items[0] && tagAndSiblings && tagAndSiblings.selectedTag) {
            if (allSelectedItemsHaveTag(items, tagAndSiblings.selectedTag)) {
                items.forEach(item => item.removeTag(tagAndSiblings.selectedTag));
            } else {
                items.forEach(item => {                    
                    if (options.removeSiblingTags) {
                        let newTags = [];
                        let foundSiblingTag = false;
                        if (item.tags) {
                            newTags = item.tags.map(tag => {
                                if (tagAndSiblings.siblingTags.includes(tag)) {
                                    // If we find an existing sibling tag, and haven't added the new tag yet, push that instead
                                    if (!foundSiblingTag) {
                                        foundSiblingTag = true;
                                        return tagAndSiblings.selectedTag;
                                    }
                                } else {
                                    return tag;
                                }
                            });
                        }

                        // If there we're no siblings, add the tag to the end
                        if (!foundSiblingTag) {
                            newTags.push(tagAndSiblings.selectedTag);
                        }

                        if (!item.tags.includes(tagAndSiblings.selectedTag) || foundSiblingTag) {
                            item.clearTags();
                            item.addTags(newTags);
                        }
                    } else {
                        if (!item.tags.includes(tagAndSiblings.selectedTag)) {
                            item.addTag(tagAndSiblings.selectedTag);
                        }
                    }
                });
            }
        }
    }

    const validateTag = (selection, options, sender) => {
        const items          = tagableItems(selection.allObjects),
              tagAndSiblings = findTagAndSiblings(options);

        if (tagAndSiblings && tagAndSiblings.selectedTag && items[0]) {
            if (typeof sender !== 'undefined') {
                sender.checked = allSelectedItemsHaveTag(items, tagAndSiblings.selectedTag);
            }
            return true;
        }
        
        if (!tagAndSiblings.selectedTag && typeof sender !== 'undefined') {
            if (sender.label && sender.label.slice(-12) !== ' (Not Found)') {
                sender.label += ' (Not Found)';
            }
        }
        return false;
    };
    
    const action = new PlugIn.Action(function (selection) {
        toggleTag(selection, options);
    });
    
    action.validate = function (selection, sender) {
        return validateTag(selection, options, sender);
    }
    return action;
})();
